I'm using beanstalkd to provide a message queue. This is pretty much essential since converting a wav into an MP3, uploading it to S3 and posting to Twitter takes a few seconds and the odds are the person on the phone would hang up, ending the adhearsion process and stopping it from working correctly.

Beanstalkd is nice and lightweight, but a bit of a pain to set up. On Mac OS X it's in MacPorts, along with libevent, which it needs. Sadly, on my deployment platform (Ubuntu 8.04) both libevent and beanstalkd had to be installed from source.

The source I used for libevent is: http://www.monkey.org/~provos/libevent-1.4.13-stable.tar.gz
And for beanstalkd: http://xph.us/dist/beanstalkd/beanstalkd-1.4.3.tar.gz

I tweaked an init.d script I found on the interweb (included below). Note that I'm using the most recent beanstalkd as of writing, which includes support for a binlog on disk, which I'm using. This means that if the power goes out any unprocessed messages won't just vanish.

The code that pulls the messages off of the queue lives in telapp/save_message.rb, and there's a rake task which is called once a minute from the cron. I felt once a minute was good timing - it helps to avoid any problems with hitting Twitter's API rate limiting.

init.d script:

#!/bin/bash
#
# beanstalkd
#
# chkconfig: - 85 15
# description: start, stop, restart beanstalkd
#              
# started by monit

RETVAL=0

start() {
/usr/local/bin/beanstalkd -d -f 100 -b /var/spool/beanstalkd
ps aux | grep '[b]eanstalkd' | awk '{print $2}' > /var/run/beanstalkd.pid
ps aux | grep '[b]eanstalkd' | grep -v /etc/ | awk '{print $2}' > /var/run/beanstalkd.pid
}

stop() {
kill -9 `cat /var/run/beanstalkd.pid`
rm /var/run/beanstalkd.pid
}

case "$1" in
    start)
      start
      RETVAL=$?
  ;;
    stop)
      stop
      RETVAL=$?
  ;;
    restart)
      stop
      sleep 2
      start
      RETVAL=$?
  ;;
    *)
      echo "Usage: beanstalkd {start|stop|restart}"
      exit 1
  ;;
esac      

exit $RETVAL
